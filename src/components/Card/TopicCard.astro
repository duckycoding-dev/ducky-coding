---
import Card from '@components/Card/Card.astro';
import Link from '@components/Link/Link.astro';
import { cn } from '@utils/cn';
import { envs } from '@utils/env';
import type { ImageMetadata } from 'astro';
import type { HTMLAttributes } from 'astro/types';
import { Image } from 'astro:assets';
import { IMAGE_COMMON_SIZES } from '../../utils/globals';
import { getImageWidths } from '../../utils/images/images';

export type TopicCardProps = HTMLAttributes<'a'> &
  (
    | {
        title: string;
        titleBackgroundColor?: `#${string}` | 'transparent';
        imageSrc?: undefined;
        imageAlt?: undefined;
        fetchPriority?: undefined;
        loading?: undefined;
        decoding?: undefined;
        slug: string;
        backgroundGradient?: string;
      }
    | {
        title?: undefined;
        titleBackgroundColor?: undefined;
        imageSrc: string | ImageMetadata;
        imageAlt: string;
        fetchPriority?: 'high' | 'low' | 'auto';
        loading?: 'eager' | 'lazy';
        decoding?: 'async' | 'auto' | 'sync';
        slug: string;
        backgroundGradient?: string;
      }
    | {
        title: string;
        titleBackgroundColor?: `#${string}` | 'transparent';
        imageSrc: string | ImageMetadata;
        imageAlt: string;
        fetchPriority?: 'high' | 'low' | 'auto';
        loading?: 'eager' | 'lazy';
        decoding?: 'async' | 'auto' | 'sync';
        slug: string;
        backgroundGradient?: string;
      }
  );

type Props = TopicCardProps;

const {
  title,
  class: className,
  titleBackgroundColor = 'transparent',
  decoding = 'auto',
  loading = 'eager',
  fetchPriority = 'auto',
  imageSrc,
  imageAlt,
  slug,
  backgroundGradient = 'from-accent-100 to-accent3-100 bg-gradient-to-br',
  ...props
}: Props = Astro.props;
---

<Link
  variant='unstyled'
  href={slug && `${envs.BASE_SITE_URL}/topics/${slug}`}
  class={cn('', className)}
  title={title}
  {...props}
>
  <Card class='flex h-full flex-col'>
    {
      imageSrc &&
        (typeof imageSrc === 'string' ? (
          <Image
            format={'avif'}
            src={imageSrc}
            alt={imageAlt}
            loading={loading}
            decoding={decoding}
            class={`${backgroundGradient} aspect-square w-full object-contain`}
            width={200}
            height={200}
            widths={getImageWidths(200)}
            sizes={IMAGE_COMMON_SIZES}
            fetchpriority={fetchPriority}
          />
        ) : (
          <Image
            format={'avif'}
            src={imageSrc}
            alt={imageAlt}
            loading={loading}
            decoding={decoding}
            class={`${backgroundGradient} aspect-square w-full object-contain`}
            widths={getImageWidths(imageSrc.width)}
            sizes={IMAGE_COMMON_SIZES}
            fetchpriority={fetchPriority}
          />
        ))
    }
    {
      title ? (
        <h2 class='border-secondary border-4 border-x-0 p-2.5 text-center text-xl font-black'>
          {title.charAt(0).toUpperCase() + title.slice(1)}
        </h2>
      ) : null
    }
  </Card>
</Link>

<style define:vars={{ titleBackgroundColor }}>
  h2 {
    background-color: var(--titleBackgroundColor);
  }
</style>
