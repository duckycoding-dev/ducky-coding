---
import TopicCard from '@components/Card/TopicCard.astro';
import HolyGrailLayout from '@layouts/HolyGrailLayout/HolyGrailLayout.astro';
import { TopicsService } from '@db/features/topics/topics.service';
import type { ImageMetadata } from 'astro';
import { matchImageFromGlobImport } from '@utils/images/images';
import DuckyCodingLogo from '@assets/images/DuckyCoding_logo.png';
import { serverLogger } from '@utils/logs/logger';
import { WEBSITE_FIRST_PUBLISHING_DATE, WEBSITE_ROOT } from '@utils/globals';

const topicsWithImages = (await TopicsService.getAllTopicsWithImage()).filter(
  (topic) => topic.postCount ?? 0 > 0,
);
// Process topics and match with images
const processedTopics = (
  await Promise.all(
    topicsWithImages.map(async (topic) => {
      let processedImage: ImageMetadata | undefined;
      const imageToFindPath = topic.image?.path;
      if (imageToFindPath) {
        const images = import.meta.glob<{ default: ImageMetadata }>(
          `/src/assets/images/topics/**/*.{jpeg,jpg,png,gif,webp,svg}`,
        );
        processedImage = await matchImageFromGlobImport(
          images,
          imageToFindPath,
          serverLogger,
        );
      }

      const processedTopic = {
        ...topic,
        imageSrc: processedImage ?? null,
      };
      return processedTopic;
    }),
  )
).sort((topicA, topicB) => {
  // First, sort by lastPostDate (descending)
  const dateA = topicA.lastPostDate ?? 0;
  const dateB = topicB.lastPostDate ?? 0;
  if (dateA > dateB) return -1;
  if (dateA < dateB) return 1;
  // If lastPostDate is equal, sort by title (ascending)
  const titleA = topicA.title?.toLowerCase() ?? '';
  const titleB = topicB.title?.toLowerCase() ?? '';
  return titleA.localeCompare(titleB);
});

const pageUrl = Astro.url.href;

const lastTopicDateAsISOString = topicsWithImages[0]?.lastPostDate
  ? new Date(topicsWithImages[0].lastPostDate).toISOString()
  : WEBSITE_FIRST_PUBLISHING_DATE;

// JSON-LD structured data for topics page
const topicsPageJsonLd = {
  item: {
    '@context': 'https://schema.org',
    '@type': 'CollectionPage',
    '@id': pageUrl,
    name: 'Topics - DuckyCoding',
    url: pageUrl,
    description:
      'Explore web development topics on DuckyCoding - from JavaScript and TypeScript to React, Vue, and more. Find detailed tutorials and practical guides.',
    mainEntity: {
      '@type': 'ItemList',
      numberOfItems: processedTopics.length,
      itemListElement: processedTopics.map(
        (topic, index) =>
          ({
            '@type': 'ListItem',
            position: index + 1,
            item: {
              '@type': 'Thing',
              name: topic.title,
              '@id': `${WEBSITE_ROOT}/topics/${topic.slug}`,
              url: `${WEBSITE_ROOT}/topics/${topic.slug}`,
              description:
                topic.description ||
                `Articles and tutorials about ${topic.title}`,
              image: topic.imageSrc
                ? new URL(topic.imageSrc.src, WEBSITE_ROOT).href
                : undefined,
            },
          }) as const,
      ),
    },
    breadcrumb: {
      '@type': 'BreadcrumbList',
      itemListElement: [
        {
          '@type': 'ListItem',
          position: 1,
          name: 'Home',
          item: WEBSITE_ROOT,
        },
        {
          '@type': 'ListItem',
          position: 2,
          name: 'Topics',
          item: pageUrl,
        },
      ],
    },
  },
} as const;
---

<HolyGrailLayout
  seoProps={{
    title: 'Topics',
    description:
      'Explore web development topics on DuckyCoding - from JavaScript and TypeScript to React, Vue, and more. Find detailed tutorials and practical guides.',
    openGraph: {
      basic: {
        title: "DuckyCoding's blog posts topics",
        type: 'website',
        url: pageUrl,
        image: new URL(DuckyCodingLogo.src, WEBSITE_ROOT).href,
      },
      optional: {
        description:
          'Explore web development topics on DuckyCoding - from JavaScript and TypeScript to React, Vue, and more. Find detailed tutorials and practical guides.',
        locale: 'en_US',
        siteName: 'DuckyCoding',
        localeAlternate: ['en_GB'],
        determiner: '',
        audio: undefined,
        video: undefined,
      },
      image: {
        url: new URL(DuckyCodingLogo.src, WEBSITE_ROOT).href,
        secureUrl: new URL(DuckyCodingLogo.src, WEBSITE_ROOT).href,
        height: DuckyCodingLogo.height,
        width: DuckyCodingLogo.width,
        type: `image/${DuckyCodingLogo.format}`,
        alt: "DuckyCoding's logo",
      },
      article: {
        publishedTime: WEBSITE_FIRST_PUBLISHING_DATE,
        modifiedTime: lastTopicDateAsISOString,
        section: 'Web Development',
        authors: ['DuckyCoding', 'Davide'],
        tags: ['DuckyCoding', 'web development', 'topics', 'posts'],
      },
    },
    twitter: {
      card: 'summary_large_image',
      site: '@ducky_coding',
      creator: '@ducky_coding',
      title: "DuckyCoding's blog posts topics",
      description:
        'Explore web development topics on DuckyCoding - from JavaScript and TypeScript to React, Vue, and more. Find detailed tutorials and practical guides.',
      image: new URL(DuckyCodingLogo.src, WEBSITE_ROOT).href,
      imageAlt: "DuckyCoding's logo",
    },
    extend: {
      meta: [
        {
          name: 'keywords',
          content: 'DuckyCoding, web development, topics, posts',
        },
      ],
    },
  }}
  jsonLd={topicsPageJsonLd}
>
  <h1
    class='decoration-accent mb-2 text-center text-4xl font-extrabold underline underline-offset-4'
  >
    Topics
  </h1>
  <small class='mb-8 block text-center italic'
    >Ordered by topic with the newest post first</small
  >
  <section
    class='xs:grid-cols-2 grid grid-cols-1 gap-5 sm:grid-cols-[repeat(auto-fill,minmax(200px,1fr))]'
  >
    {
      processedTopics.length === 0 && (
        <p class='col-span-full text-center text-lg font-semibold'>
          No topics available at the moment.
        </p>
      )
    }
    {
      processedTopics.map((topic, index) => (
        <TopicCard
          imageSrc={topic.imageSrc || DuckyCodingLogo}
          imageAlt={topic.image?.alt ?? `${topic.title} representation`}
          title={topic.title}
          slug={topic.slug}
          backgroundGradient={topic.backgroundGradient || undefined}
          loading={index < 4 ? 'eager' : 'lazy'}
        />
      ))
    }
  </section>
</HolyGrailLayout>
