---
import HolyGrailLayout from '@layouts/HolyGrailLayout/HolyGrailLayout.astro';
import { TopicsService } from '@db/features/topics/topics.service';
import PostCard from '@components/Card/PostCard.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import { type ImageMetadata } from 'astro';
import { matchImageFromGlobImport } from '@utils/images/images';
import { IMAGE_DENSITIES } from '@utils/globals';
import { serverLogger } from '@utils/logs/logger';
import { postsService } from '../../../db/features/posts/posts.service';

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const topicsWithImages = await TopicsService.getAllTopicsWithImage();
  // Process topics and match with images

  const dynamicRouteData = await Promise.all(
    topicsWithImages.map(async (topic) => {
      let processedImage: ImageMetadata | undefined;
      const imageToFindPath = topic.image?.path;
      if (imageToFindPath) {
        const images = import.meta.glob<{ default: ImageMetadata }>(
          `/src/assets/images/topics/**/*.{jpeg,jpg,png,gif,webp,svg}`,
        );
        processedImage = await matchImageFromGlobImport(
          images,
          imageToFindPath,
        );
      }

      const processedTopic = {
        ...topic,
        imageSrc: processedImage ?? null,
      };
      return {
        params: { topic: decodeURI(topic.slug) },
        props: { processedTopic },
      };
    }),
  );

  return dynamicRouteData;
}
// 2. For your template, you can get the entry directly from the prop
const { processedTopic } = Astro.props;

const postsCollection = (await getCollection('posts'))
  .filter((post) => post.data.topicTitle === processedTopic.title)
  .map((entry) => ({ id: entry.id, tags: entry.data.tags })); // in astro 5 "slug" became "id", which corresponds to the filename of the content file
const postsWithBannerImage = (
  await postsService.getPostsWithBannerBySlugs(
    postsCollection.map((post) => post.id),
  )
).filter(
  (postWithBannerImage) => postWithBannerImage.post.status === 'published',
);

const processedPostsWithImages = await Promise.all(
  postsWithBannerImage.map(async (post) => {
    let processedImage: ImageMetadata | undefined;
    const imageToFindPath = `${post.post.bannerImagePath}`;
    if (imageToFindPath) {
      const images = import.meta.glob<{ default: ImageMetadata }>(
        `/src/assets/images/posts/**/*.{jpeg,jpg,png,gif,webp,svg}`,
      );
      processedImage = await matchImageFromGlobImport(
        images,
        imageToFindPath,
        serverLogger,
      );
    }

    const postTags =
      postsCollection.find((p) => p.id === post.post.slug)?.tags || [];

    return {
      ...post,
      processedBannerImage: processedImage ?? null,
      tags: postTags,
    };
  }),
);
---

<HolyGrailLayout
  title={processedTopic.title}
  seoProps={{
    title: `Topic: ${processedTopic.title}`,
    description: `Discover the latest posts related to ${processedTopic.title}, written by DuckyCoding!`,
    extend: {
      meta: [
        {
          name: 'keywords',
          content: `${processedTopic.title}, posts about ${processedTopic.title}, posts`,
        },
      ],
    },
  }}
>
  <section
    class={`from-accent-300 to-accent2-300 shadow-comic relative grid h-[25dvh] grid-cols-1 grid-rows-1 flex-col place-items-center gap-4 overflow-hidden border-4 bg-gradient-to-br md:h-[35dvh] ${processedTopic.imageSrc && processedTopic.description ? 'mb-4' : ''}`}
  >
    <h1
      class='bg-primary-700 border-secondary shadow-comic text-8 z-1 [grid-column:1/1] [grid-row:1/1] border-4 px-6 text-center text-[clamp(0.75rem,10vw,6rem)] font-extrabold md:text-left [@media(max-height:425px)]:text-[clamp(0.75rem,10vw,4.5rem)]'
    >
      {processedTopic.title}
    </h1>
    {
      processedTopic.imageSrc ? (
        <Image
          loading='eager'
          class='[grid-column:1/1] [grid-row:1/1] h-[150%] w-min object-cover md:mx-0 md:h-[200%]'
          src={processedTopic.imageSrc}
          alt={
            processedTopic.image?.alt ??
            `${processedTopic.title} representation`
          }
          densities={IMAGE_DENSITIES}
        />
      ) : null
    }
  </section>
  {
    processedTopic.description ? (
      <h2 class='border-comic border-secondary shadow-comic from-accent-100 to-accent3-100 mb-4 rounded-xl bg-gradient-to-br px-4 py-2 text-xl font-extrabold'>
        {processedTopic.description}
      </h2>
    ) : null
  }
  {
    processedPostsWithImages.length > 0 ? (
      <ul class='grid-container mt-8 grid gap-8'>
        {processedPostsWithImages.map(
          ({ post, tags, processedBannerImage }) => {
            return (
              <li class='mb-8 last-of-type:mb-0 md:last-of-type:mb-8'>
                <PostCard
                  class='block h-full'
                  post={post}
                  tags={tags}
                  bannerImage={
                    processedBannerImage || processedTopic.imageSrc || null
                  }
                />
              </li>
            );
          },
        )}
      </ul>
    ) : (
      <>
        <h2 class='mt-8 text-center text-2xl font-extrabold text-balance md:text-left'>
          {`There isn't any content about ${processedTopic.title} yet :'(`}
        </h2>
        <h3 class='text-center text-xl font-extrabold md:text-left'>
          Please check again soon!
        </h3>
      </>
    )
  }
</HolyGrailLayout>

<style>
  @media (width >= 768px) {
    .grid-container {
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    }
  }
</style>
