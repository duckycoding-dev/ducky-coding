---
import HolyGrailLayout from '@layouts/HolyGrailLayout/HolyGrailLayout.astro';
import { TopicsService } from '@db/features/topics/topics.service';
import PostCard from '@components/Card/PostCard.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import { type ImageMetadata } from 'astro';
import { getImageWidths, matchImageFromGlobImport } from '@utils/images/images';
import {
  IMAGE_COMMON_SIZES,
  WEBSITE_FIRST_PUBLISHING_DATE,
  WEBSITE_ROOT,
} from '@utils/globals';
import { serverLogger } from '@utils/logs/logger';
import { postsService } from '../../../db/features/posts/posts.service';
import DuckyCodingLogo from '@assets/images/DuckyCoding_logo.png';
import DuckIcon from '../../../components/Icons/DuckIcon/DuckIcon.astro';
import { AuthorPerson } from '@utils/jsonld/person';

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const topicsWithImages = (await TopicsService.getAllTopicsWithImage()).filter(
    (topic) => topic.postCount ?? 0 > 0,
  );
  // Process topics and match with images
  const topicsImages = import.meta.glob<{ default: ImageMetadata }>(
    `/src/assets/images/topics/**/*.{jpeg,jpg,png,gif,webp,svg}`,
  );
  const dynamicRouteData = await Promise.all(
    topicsWithImages.map(async (topic) => {
      let processedImage: ImageMetadata | undefined;
      const imageToFindPath = topic.image?.path;
      if (imageToFindPath) {
        processedImage = await matchImageFromGlobImport(
          topicsImages,
          imageToFindPath,
        );
      }

      const processedTopic = {
        ...topic,
        imageSrc: processedImage ?? null,
      };
      return {
        params: { topic: decodeURI(topic.slug) },
        props: { processedTopic },
      };
    }),
  );

  return dynamicRouteData;
}
// 2. For your template, you can get the entry directly from the prop
const { processedTopic } = Astro.props;

const postsCollection = (await getCollection('posts'))
  .filter(
    (post) =>
      post.data.topicTitle === processedTopic.title &&
      post.data.status === 'published',
  )
  .map((entry) => ({ id: entry.id, tags: entry.data.tags })); // in astro 5 "slug" became "id", which corresponds to the filename of the content file
const postsWithBannerImage = (
  await postsService.getPostsWithBannerBySlugs(
    postsCollection.map((post) => post.id),
  )
).filter(
  (postWithBannerImage) => postWithBannerImage.post.status === 'published',
);

const postsImages = import.meta.glob<{ default: ImageMetadata }>(
  `/src/assets/images/posts/**/*.{jpeg,jpg,png,gif,webp,svg}`,
);
const processedPostsWithImages = (
  await Promise.all(
    postsWithBannerImage.map(async (post) => {
      let processedImage: ImageMetadata | undefined;
      const imageToFindPath = `${post.post.bannerImagePath}`;
      if (imageToFindPath) {
        processedImage = await matchImageFromGlobImport(
          postsImages,
          imageToFindPath,
          serverLogger,
        );
      }

      const postTags =
        postsCollection.find((p) => p.id === post.post.slug)?.tags || [];

      return {
        ...post,
        processedBannerImage: processedImage ?? null,
        tags: postTags,
      };
    }),
  )
).sort((postA, postB) => {
  // First, sort by lastPostDate (descending)
  const dateA = postA.post.publishedAt ?? 0;
  const dateB = postB.post.publishedAt ?? 0;
  if (dateA > dateB) return -1;
  if (dateA < dateB) return 1;
  // If lastPostDate is equal, sort by title (ascending)
  const titleA = postA.post.title?.toLowerCase() ?? '';
  const titleB = postB.post.title?.toLowerCase() ?? '';
  return titleA.localeCompare(titleB);
});

const lastPostDateAsISOString = processedPostsWithImages[0]?.post.publishedAt
  ? new Date(processedPostsWithImages[0].post.publishedAt).toISOString()
  : WEBSITE_FIRST_PUBLISHING_DATE;

const pageUrl = Astro.url.href;

// JSON-LD structured data for individual topic page
const topicPageJsonLd = {
  item: {
    '@context': 'https://schema.org',
    '@type': 'CollectionPage',
    '@id': pageUrl,
    name: `${processedTopic.title} - DuckyCoding`,
    url: pageUrl,
    description:
      processedTopic.description ||
      `Discover the latest posts related to ${processedTopic.title}, written by DuckyCoding!`,
    about: {
      '@type': 'Thing',
      name: processedTopic.title,
      description:
        processedTopic.description ||
        `Everything about ${processedTopic.title}`,
    },
    mainEntity: {
      '@type': 'ItemList',
      numberOfItems: processedPostsWithImages.length,
      itemListElement: processedPostsWithImages.map(
        (postWithImage, index) =>
          ({
            '@type': 'ListItem',
            position: index + 1,
            item: {
              '@type': 'BlogPosting',
              headline: postWithImage.post.title,
              '@id': `${WEBSITE_ROOT}/posts/${postWithImage.post.slug}`,
              url: `${WEBSITE_ROOT}/posts/${postWithImage.post.slug}`,
              datePublished: new Date(
                postWithImage.post.publishedAt || WEBSITE_FIRST_PUBLISHING_DATE,
              ).toISOString(),
              dateModified: new Date(
                postWithImage.post?.updatedAt ||
                  postWithImage.post?.createdAt ||
                  WEBSITE_FIRST_PUBLISHING_DATE,
              ),
              author: AuthorPerson(postWithImage.post.author, WEBSITE_ROOT),
            },
          }) as const,
      ),
    },
    breadcrumb: {
      '@type': 'BreadcrumbList',
      itemListElement: [
        {
          '@type': 'ListItem',
          position: 1,
          name: 'Home',
          item: WEBSITE_ROOT,
        },
        {
          '@type': 'ListItem',
          position: 2,
          name: 'Topics',
          item: `${WEBSITE_ROOT}/topics`,
        },
        {
          '@type': 'ListItem',
          position: 3,
          name: processedTopic.title,
          item: pageUrl,
          image: processedTopic.imageSrc
            ? new URL(processedTopic.imageSrc.src, WEBSITE_ROOT).href
            : undefined,
        },
      ],
    },
  },
} as const;
---

<HolyGrailLayout
  seoProps={{
    title: `Topic: ${processedTopic.title}`,
    description: `Discover the latest posts related to ${processedTopic.title}, written by DuckyCoding!`,
    openGraph: {
      basic: {
        title: `Topic: ${processedTopic.title} - DuckyCoding`,
        type: 'website',
        url: pageUrl,
        image: new URL(
          processedTopic.imageSrc?.src ?? DuckyCodingLogo.src,
          WEBSITE_ROOT,
        ).href,
      },
      optional: {
        description: `Discover the latest posts related to ${processedTopic.title}, written by DuckyCoding!`,
        locale: 'en_US',
        siteName: 'DuckyCoding',
        localeAlternate: ['en_GB'],
        determiner: '',
        audio: undefined,
        video: undefined,
      },
      image: {
        url: new URL(
          processedTopic.imageSrc?.src ?? DuckyCodingLogo.src,
          WEBSITE_ROOT,
        ).href,
        secureUrl: new URL(
          processedTopic.imageSrc?.src ?? DuckyCodingLogo.src,
          WEBSITE_ROOT,
        ).href,
        height: processedTopic.imageSrc?.height ?? DuckyCodingLogo.height,
        width: processedTopic.imageSrc?.width ?? DuckyCodingLogo.width,
        type: `image/${processedTopic.imageSrc?.format ?? DuckyCodingLogo.format}`,
        alt: processedTopic.image?.alt ?? "DuckyCoding's logo",
      },
      article: {
        publishedTime: WEBSITE_FIRST_PUBLISHING_DATE,
        modifiedTime: lastPostDateAsISOString,
        section: 'Web Development',
        authors: ['DuckyCoding', 'Davide'],
        tags: [
          `${processedTopic.title}`,
          `posts about ${processedTopic.title}`,
          'posts',
          `${processedTopic.title} news`,
          'DuckyCoding',
        ],
      },
    },
    twitter: {
      card: 'summary_large_image',
      site: '@ducky_coding',
      creator: '@ducky_coding',
      title: `Topic: ${processedTopic.title} - DuckyCoding`,
      description: `Discover the latest posts related to ${processedTopic.title}, written by DuckyCoding!`,
      image: new URL(
        processedTopic.imageSrc?.src ?? DuckyCodingLogo.src,
        WEBSITE_ROOT,
      ).href,
      imageAlt: processedTopic.image?.alt ?? "DuckyCoding's logo",
    },
    extend: {
      meta: [
        {
          name: 'keywords',
          content: `${processedTopic.title}, posts about ${processedTopic.title}, posts, ${processedTopic.title} news, DuckyCoding`,
        },
      ],
    },
  }}
  jsonLd={topicPageJsonLd}
>
  <section
    class={`from-accent-300 to-accent2-300 shadow-comic relative grid h-[25dvh] grid-cols-1 grid-rows-1 flex-col place-items-center gap-4 overflow-hidden border-4 bg-gradient-to-br md:h-[35dvh] ${processedTopic.imageSrc && processedTopic.description ? 'mb-4' : ''}`}
  >
    <h1
      class='bg-primary-700 border-secondary shadow-comic text-8 z-1 [grid-column:1/1] [grid-row:1/1] border-4 px-6 text-center text-[clamp(0.75rem,10vw,6rem)] font-extrabold md:text-left [@media(max-height:425px)]:text-[clamp(0.75rem,10vw,4.5rem)]'
    >
      {processedTopic.title}
    </h1>
    {
      processedTopic.imageSrc ? (
        <Image
          format='avif'
          loading='eager'
          decoding='async'
          fetchpriority='high'
          class='[grid-column:1/1] [grid-row:1/1] h-[150%] w-min object-cover md:mx-0 md:h-[200%]'
          src={processedTopic.imageSrc}
          alt={
            processedTopic.image?.alt ??
            `${processedTopic.title} representation`
          }
          title={processedTopic.title}
          widths={getImageWidths(processedTopic.imageSrc.width)}
          sizes={IMAGE_COMMON_SIZES}
        />
      ) : null
    }
  </section>
  {
    processedTopic.description ? (
      <h2 class='border-comic border-secondary shadow-comic from-accent-100 to-accent3-100 mb-4 rounded-xl bg-gradient-to-br px-4 py-2 text-xl font-extrabold'>
        {processedTopic.description}
      </h2>
    ) : null
  }
  {
    processedPostsWithImages.length > 0 ? (
      <ul class='grid-container mt-8 grid gap-8'>
        {processedPostsWithImages.map(
          ({ post, tags, processedBannerImage }) => {
            return (
              <li class='mb-8 last-of-type:mb-0 md:last-of-type:mb-8'>
                <PostCard
                  class='block h-full'
                  post={post}
                  tags={tags}
                  bannerImage={
                    processedBannerImage || processedTopic.imageSrc || null
                  }
                />
              </li>
            );
          },
        )}
      </ul>
    ) : (
      <>
        <h2 class='mt-8 text-center text-2xl font-extrabold text-balance md:text-left'>
          {`There isn't any content about ${processedTopic.title} yet :'(`}
        </h2>
        <h3 class='flex items-center justify-center text-xl font-extrabold md:justify-start'>
          Please check again soon!{' '}
          <span>
            <DuckIcon class='h-8' />
          </span>
        </h3>
      </>
    )
  }
</HolyGrailLayout>

<style>
  @media (width >= 768px) {
    .grid-container {
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    }
  }
</style>
