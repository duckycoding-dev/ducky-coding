---
import { getCollection } from 'astro:content';
import HolyGrailLayout from '@layouts/HolyGrailLayout/HolyGrailLayout.astro';
import { Image } from 'astro:assets';
import { IMAGE_DENSITIES } from '@utils/globals';
import type { ImageMetadata } from 'astro';
import { matchImageFromGlobImport } from '@utils/images/images';
import Tag from '@components/Tag/Tag.astro';
import Link from '@components/Link/Link.astro';
import MarkdownContent from '@layouts/MarkdownContent/MarkdownContent.astro';
import type { Image as BannerImage } from '@db/features/images/images.model'; // import { syncPostWithDatabase } from '@utils/content/content';

import { serverLogger } from '@utils/logs/logger';
import { ImagesService } from '../../../db/features/images/images.service';

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const postsEntries = await getCollection('posts');

  const bannerImagesPromises = postsEntries.map((entry) => {
    const imagePath = entry.data.bannerImagePath;
    if (imagePath) {
      return ImagesService.getImageByPath(imagePath);
    }
    return Promise.resolve(undefined);
  });

  const bannerImages: (BannerImage | undefined)[] =
    await Promise.all(bannerImagesPromises);

  return postsEntries.map((entry, id) => ({
    params: { id: decodeURI(entry.id) },
    props: { entry, bannerImage: bannerImages[id] },
  }));
}
// 2. For your template, you can get the entry directly from the prop
const { entry, bannerImage } = Astro.props;

let processedImage: ImageMetadata | undefined;
const imageToFindPath = bannerImage?.path;
if (imageToFindPath) {
  const images = import.meta.glob<{ default: ImageMetadata }>(
    `/src/assets/images/posts/**/*.{jpeg,jpg,png,gif,webp,svg}`,
  );
  processedImage = await matchImageFromGlobImport(
    images,
    imageToFindPath,
    serverLogger,
  );
}
---

<HolyGrailLayout
  seoProps={{
    description: entry.data.summary,
    extend: {
      meta: [
        {
          name: 'keywords',
          content: entry.data.tags.join(', '),
        },
      ],
    },
  }}
>
  <section
    class='from-accent-300 to-accent2-300 shadow-comic flex flex-col gap-4 border-4 bg-gradient-to-br'
  >
    <div
      class=`grid ${bannerImage ? 'md:grid-cols-[1fr_minmax(max-content,250px)]' : ''} items-center`
    >
      {
        bannerImage && processedImage ? (
          <Image
            src={processedImage}
            alt={
              bannerImage.alt ??
              `Post banner cover related to ${entry.data.topicTitle}`
            }
            loading={'eager'}
            decoding={'async'}
            class='border-accent self-stretch object-cover p-4'
            densities={IMAGE_DENSITIES}
          />
        ) : null
      }
      <section
        class='flex flex-col justify-center gap-2 self-stretch justify-self-center px-8 pt-0 pb-4 md:pb-0'
      >
        <h1
          class='decoration-accent text-center text-4xl font-extrabold underline underline-offset-4'
        >
          {entry.data.title}
        </h1>
        <p class='text-center text-lg font-semibold'>
          <span
            >Written by: {
              entry.data.author.toLowerCase() === 'duckycoding'
                ? 'DuckyCoding (me)'
                : entry.data.author
            }</span
          >
        </p>
        <p class='text-center text-base italic'>
          Read time: {entry.data.timeToRead}
          {entry.data.timeToRead > 1 ? 'minutes' : 'minute'}
        </p>
        {
          entry.data.tags.length > 0 ? (
            <div class='flex flex-wrap justify-center gap-2'>
              {entry.data.tags.map((tag, index) => (
                <Link
                  variant='contained'
                  href={`/topics/${tag.toLowerCase()}`}
                  class='border-secondary rounded-full border-none p-0'
                >
                  <Tag
                    class={`${index % 2 === 0 ? 'bg-accent2' : 'bg-accent'}`}
                  >
                    {tag}
                  </Tag>
                </Link>
              ))}
            </div>
          ) : null
        }
      </section>
    </div>
  </section>
  <MarkdownContent entry={entry} />
</HolyGrailLayout>
