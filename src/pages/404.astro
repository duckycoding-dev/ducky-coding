---
import HolyGrailLayout from '@layouts/HolyGrailLayout/HolyGrailLayout.astro';
import { Image } from 'astro:assets';
import duck404 from '@assets/images/404_duck.png';
import Link from '@components/Link/Link.astro';
import {
  IMAGE_COMMON_SIZES,
  WEBSITE_FIRST_PUBLISHING_DATE,
  WEBSITE_ROOT,
} from '@utils/globals';
import { syncAllContent, syncImages } from '../db/sync/contentSync';
import { getImageWidths } from '../utils/images/images';

// Content syncing is done here because this is the first page that gets rendered in the build process. (because pages are renrdered in alphabetical order)
if (import.meta.env.PROD) {
  await syncImages();
  await syncAllContent();
}
const pageUrl = Astro.url.href;
---

<HolyGrailLayout
  seoProps={{
    title: 'Page not found',
    description:
      'The requested page or resource does not exist on this website: please check the URL for any typos.',
    openGraph: {
      basic: {
        title: 'Page not found - DuckyCoding',
        image: new URL(duck404.src, WEBSITE_ROOT).href,
        type: 'website',
        url: pageUrl,
      },
      optional: {
        description:
          'The requested page or resource does not exist on this website: please check the URL for any typos.',
        locale: 'en_US',
        siteName: 'DuckyCoding',
        localeAlternate: ['en_GB'],
        determiner: '',
        audio: undefined,
        video: undefined,
      },
      image: {
        url: new URL(duck404.src, WEBSITE_ROOT).href,
        secureUrl: new URL(duck404.src, WEBSITE_ROOT).href,
        height: duck404.height,
        width: duck404.width,
        type: `image/${duck404.format}`,
        alt: 'illustration of a duck holding a "404 error" sign, generated by Microsoft\'s Bing Copilot',
      },
      article: {
        publishedTime: WEBSITE_FIRST_PUBLISHING_DATE,
        modifiedTime: WEBSITE_FIRST_PUBLISHING_DATE,
        section: 'Web Development',
        authors: ['DuckyCoding', 'Davide'],
        tags: [
          'DuckyCoding',
          '404',
          'missing resource',
          'missing page',
          'error',
        ],
      },
    },
    twitter: {
      card: 'summary_large_image',
      site: '@ducky_coding',
      creator: '@ducky_coding',
      title: 'Page not found - DuckyCoding',
      description:
        'The requested page or resource does not exist on this website: please check the URL for any typos.',
      image: new URL(duck404.src, WEBSITE_ROOT).href,
      imageAlt:
        'illustration of a duck holding a "404 error" sign, generated by Microsoft\'s Bing Copilot',
    },
    extend: {
      meta: [
        {
          name: 'keywords',
          content: 'DuckyCoding, 404, missing resource, missing page, error',
        },
      ],
    },
  }}
>
  <h1
    class='mx-auto mb-8 text-center text-3xl font-extrabold text-balance md:max-w-[50%]'
  >
    The page or resource you requested could not be found <span
      aria-hidden='true'>:(</span
    >
  </h1>
  <Image
    format={'avif'}
    src={duck404}
    alt={'illustration of a duck holding a "404 error" sign, generated by Microsoft\'s Bing Copilot'}
    class='mx-auto max-h-96 object-contain'
    widths={getImageWidths(duck404.width)}
    sizes={IMAGE_COMMON_SIZES}
    fetchpriority='high'
    loading='lazy'
    decoding='async'
  />
  <h2
    class='previous-page mx-auto mt-8 text-center text-2xl font-extrabold text-balance'
  >
    Go back to the <Link class='text-2xl' href='/'>previous page</Link>
  </h2>
  <h3
    class='previous-page mx-auto text-center text-xl font-extrabold text-balance'
  >
    or
  </h3>
  <h2 class='mx-autotext-balance text-center text-2xl font-extrabold'>
    Go back to the <Link class='text-2xl' href='/'>home page</Link>
  </h2>
</HolyGrailLayout>

<script>
  const previousUrl = document.referrer;
  const previousPageExists = window.history.length > 1 && previousUrl;
  const previousPageElements = document.querySelectorAll('.previous-page');

  // removes call to action link to previous page if
  // there is not previous page to go to
  previousPageElements.forEach((element) => {
    if (!previousPageExists) element.remove();
  });

  const previousPageLink = document.querySelector('.previous-page>*');
  previousPageLink?.setAttribute('href', previousUrl);
</script>
