---
import { getCollection } from 'astro:content';
import HolyGrailLayout from '@layouts/HolyGrailLayout/HolyGrailLayout.astro';
import Link from '@components/Link/Link.astro';
import { Image } from 'astro:assets';
import { getImageWidths } from '@utils/images/images';
import { matchImageFromGlobImport } from '../../utils/images/images';
import { serverLogger } from '../../utils/logs/logger';
import CalendarIcon from '../../components/Icons/CalendarIcon.astro';
import PersonIcon from '../../components/Icons/PersonIcon.astro';
import {
  WEBSITE_FIRST_PUBLISHING_DATE,
  WEBSITE_ROOT,
} from '../../utils/globals';
import DuckyCodingLogo from '../../assets/images/DuckyCoding_logo.png';
import type { BaseHeadProps } from '../../layouts/BaseHead/BaseHead.astro';
import { AuthorPerson, DuckyCodingPerson } from '../../utils/jsonld/person';

// TODO: add a separate RSS feed for memes
// TODO: decide if we will keep this as a single page with all memes loaded at once, or if should will implement pagination once the number of memes grows

const memesImages = import.meta.glob<{ default: ImageMetadata }>(
  `/src/assets/images/memes/**/*.{jpeg,jpg,png,gif,webp,svg}`,
);

const memes = (await getCollection('memes')).sort(
  (a, b) =>
    new Date(b.data.createdAt).valueOf() - new Date(a.data.createdAt).valueOf(),
);

const memesWithProcessedImage = (
  await Promise.all(
    memes.map(async (meme) => {
      const processedImage = await matchImageFromGlobImport(
        memesImages,
        meme.data.imagePath,
        serverLogger,
      );
      const res = { ...meme, processedImage };
      return res;
    }),
  )
).filter(
  (meme) => meme.processedImage !== undefined,
) as ((typeof memes)[number] & {
  processedImage: ImageMetadata;
})[]; // Ensure processedImage is defined, type inference is not working correctly with filter
const pageUrl = Astro.url.href;

const memesJsonLd = {
  item: {
    '@context': 'https://schema.org',
    '@type': 'CollectionPage',
    url: pageUrl,
    name: "DuckyCoding's memes",
    headline: 'Tech memes by DuckyCoding',
    description:
      "Enjoy a collection of tech-related memes that will make you laugh and relate to the developer's life, brought to you by DuckyCoding.",
    creator: DuckyCodingPerson,
    author: DuckyCodingPerson,
    publisher: DuckyCodingPerson,
    dateCreated: WEBSITE_FIRST_PUBLISHING_DATE,
    datePublished: WEBSITE_FIRST_PUBLISHING_DATE,
    dateModified: memes[0]?.data?.createdAt
      ? new Date(memes[0].data.createdAt).toISOString()
      : WEBSITE_FIRST_PUBLISHING_DATE,
    mainEntity: {
      '@type': 'ItemList',
      name: "DuckyCoding's Blog",
      '@id': pageUrl,
      url: pageUrl,
      description:
        'Web development blog featuring tutorials, guides, and insights about modern web technologies.',
      itemListElement: memesWithProcessedImage.map((meme, index) => ({
        '@type': 'ListItem',
        position: index + 1,
        item: {
          '@type': 'CreativeWork',
          name: meme.data.title,
          author: AuthorPerson(meme.data.author, WEBSITE_ROOT),
          image: new URL(meme.processedImage.src, WEBSITE_ROOT).href,
        },
      })),
    },
    breadcrumb: {
      '@type': 'BreadcrumbList',
      itemListElement: [
        {
          '@type': 'ListItem',
          position: 1,
          name: 'Home',
          item: WEBSITE_ROOT,
        },
        {
          '@type': 'ListItem',
          position: 2,
          name: 'Memes',
          item: `${WEBSITE_ROOT}/memes`,
        },
      ],
    },
  },
} as const satisfies NonNullable<BaseHeadProps['jsonLd']>;
---

<HolyGrailLayout
  seoProps={{
    title: "Ducky's tech memes",
    description:
      "Enjoy a collection of tech-related memes that will make you laugh and relate to the developer's life, brought to you by DuckyCoding.",
    openGraph: {
      basic: {
        title: "Ducky's tech memes",
        type: 'website',
        url: pageUrl,
        image: new URL(DuckyCodingLogo.src, WEBSITE_ROOT).href,
      },
      optional: {
        description:
          "Enjoy a collection of tech-related memes that will make you laugh and relate to the developer's life, brought to you by DuckyCoding.",
        locale: 'en_US',
        siteName: 'DuckyCoding',
        localeAlternate: ['en_GB'],
        determiner: '',
        audio: undefined,
        video: undefined,
      },
      image: {
        url: new URL(DuckyCodingLogo.src, WEBSITE_ROOT).href,
        secureUrl: new URL(DuckyCodingLogo.src, WEBSITE_ROOT).href,
        height: DuckyCodingLogo.height,
        width: DuckyCodingLogo.width,
        type: `image/${DuckyCodingLogo.format}`,
        alt: "DuckyCoding's logo",
      },
      article: {
        publishedTime: WEBSITE_FIRST_PUBLISHING_DATE,
        modifiedTime: memes[0]?.data?.createdAt
          ? new Date(memes[0].data.createdAt).toISOString()
          : WEBSITE_FIRST_PUBLISHING_DATE,
        section: "Ducky's tech memes",
        authors: ['DuckyCoding', 'Davide'],
        tags: ['DuckyCoding', 'memes', 'tech', 'web development', 'developer'],
      },
    },
    twitter: {
      card: 'summary_large_image',
      site: '@ducky_coding',
      creator: '@ducky_coding',
      title: 'Tech memes',
      description:
        "Enjoy a collection of tech-related memes that will make you laugh and relate to the developer's life, brought to you by DuckyCoding.",
      image: new URL(DuckyCodingLogo.src, WEBSITE_ROOT).href,
      imageAlt: "DuckyCoding's logo",
    },
    extend: {
      meta: [
        {
          name: 'keywords',
          content: 'DuckyCoding, memes, tech, web development, developer',
        },
      ],
    },
  }}
  jsonLd={memesJsonLd}
>
  <h1
    class='decoration-accent mb-2 text-center text-4xl font-extrabold wrap-anywhere underline underline-offset-4'
  >
    Ducky's meme gallery
  </h1>
  <p>
    <small class='block text-center italic'
      >A curated list of tech related memes</small
    >
  </p>
  <small class='mb-8 block text-center italic'
    >Click on each meme to view it in detail</small
  >
  {
    memesWithProcessedImage.length > 0 ? (
      <section class='grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3'>
        {memesWithProcessedImage.map((meme, index) => (
          <Link
            aria-label={"View page for this meme's details"}
            variant={'unstyled'}
            href={`/memes/${meme.id}/`}
            class='group hover:bg-primary-100 focus:bg-primary-100 bg-primary-100 xs:p-4 xs:gap-4 focus:shadow-comic-xl border-comic border-secondary shadow-comic-lg hover:shadow-comic-xl active:shadow-comic flex flex-col justify-between gap-2 overflow-hidden p-2 transition-all duration-300 hover:-translate-y-1 focus:-translate-y-1 active:translate-y-0.5'
          >
            <small class='block text-center italic'>
              Click to see more details
            </small>
            <div class='border-secondary aspect-square h-auto w-full overflow-hidden border-2'>
              <Image
                format={'avif'}
                src={meme.processedImage}
                widths={getImageWidths(meme.processedImage.width)}
                sizes={`
                  (max-width: 479px) calc(100vw - 4rem),
                  ((min-width: 480px) and (max-width: 767px)) calc(50vw - 3.75rem),
                  (min-width: 768px) 25vw,
                  `}
                alt={meme.data.imageAlt || meme.data.title}
                class='h-full object-cover transition-transform duration-200 group-hover:scale-105'
                loading={index < 4 ? 'eager' : 'lazy'}
                fetchpriority={index < 4 ? 'high' : 'auto'}
              />
            </div>
            <footer class='text-secondary-600 flex flex-wrap justify-between text-center text-sm font-black wrap-anywhere'>
              <span class='inline-flex items-center gap-1'>
                <PersonIcon
                  size={24}
                  title='Created by'
                  aria-labelledby='created-by'
                />
                <span class='wrap-anywhere'>
                  {meme.data.author.toLowerCase() === 'duckycoding'
                    ? 'DuckyCoding (me)'
                    : meme.data.author}
                </span>
              </span>
              <span class='inline-flex items-center gap-1'>
                <CalendarIcon
                  size={24}
                  aria-labelledby='creation-date'
                  title='Creation date'
                />
                <time
                  datetime={`${new Date(meme.data.createdAt).getFullYear()}-${new Date(meme.data.createdAt).getMonth() + 1}-${new Date(meme.data.createdAt).getDate()}`}
                >
                  {new Date(meme.data.createdAt).toLocaleDateString()}
                </time>
              </span>
            </footer>
          </Link>
        ))}
      </section>
    ) : (
      <p class='text-center text-xl md:text-left'>
        No memes published yet. Stay tuned!
      </p>
    )
  }
</HolyGrailLayout>
