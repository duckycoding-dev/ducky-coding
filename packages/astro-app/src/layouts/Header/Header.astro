---
import { Navbar } from '@components/Navbar';
import type { HTMLAttributes } from 'astro/types';
import { Image } from 'astro:assets';
import DuckyCodingLogo from '@assets/images/DuckyCoding_logo.png';
import { HamburgerToggle } from '@components/HamburgerToggle';
import { Link } from '@components/Link';
import { cn } from '@utils/cn';
import { IMAGE_DENSITIES } from '@utils/globals';

export interface HeaderProps {}

interface Props extends HTMLAttributes<'header'>, HeaderProps {}

const { class: className, ...props }: Props = Astro.props;
---

<header
  class={cn(
    'bg-primary-700 border-comic border-secondary sticky top-0 z-10 [grid-area:header]',
    className,
  )}
  {...props}
>
  <div
    class='mx-auto flex max-w-7xl items-center justify-between gap-x-8 px-4 py-2 md:px-8'
  >
    <HamburgerToggle
      id='site_side_navigation_menu_id'
      title='navigation menu toggle'
      class='peer z-20 shrink-0 md:hidden'
      variant={'small'}
    />
    <div class='mx-auto md:mx-0' aria-hidden='true'>
      <Link
        href='/'
        variant='unstyled'
        class='md:justify-start'
        id='logo'
        tabindex={-1}
      >
        <Image
          alt={'DuckyCoding logo'}
          src={DuckyCodingLogo}
          width={38}
          densities={IMAGE_DENSITIES}
          class='max-w-none'
        />
      </Link>
    </div>
    <Navbar
      id='primary-navigation'
      class='fixed z-10 overflow-hidden transition-transform peer-checked:flex peer-checked:translate-x-0 peer-[:not(checked)]:-translate-x-full md:ml-auto md:peer-[:not(checked)]:translate-x-0'
    />
    <div class='flex items-center gap-4 text-2xl'>
      <Link
        id='login-link-header'
        href={'/login'}
        class={'text-3xl md:text-base text-primary font-medium'}>Login</Link
      >
      <Image
        hidden
        id='logged-user-avatar-header'
        alt={'DuckyCoding logo'}
        src={DuckyCodingLogo}
        width={38}
        densities={IMAGE_DENSITIES}
        class='max-w-none'
      />
    </div>
  </div>
</header>

<style>
  #logo:checked {
    transform: translateX(1000px);
  }
</style>

<script>
  import type { UserVerificationEvent } from '../../types/events';

  const loginLinkHeader: HTMLAnchorElement | null = document.querySelector(
    'a#login-link-header',
  );
  const loggedUserAvatarHeader: HTMLElement | null = document.querySelector(
    '#logged-user-avatar-header',
  );
  if (loggedUserAvatarHeader && loginLinkHeader) {
    const userStringInLocalStorage = window.localStorage.getItem('user');
    if (
      userStringInLocalStorage !== 'checked' &&
      userStringInLocalStorage !== null
    ) {
      loggedUserAvatarHeader.hidden = false;
      loggedUserAvatarHeader.style.display = '';
      loginLinkHeader.hidden = true;
      loginLinkHeader.style.display = 'none';
    } else {
      loggedUserAvatarHeader.hidden = true;
      loggedUserAvatarHeader.style.display = 'none';
      loginLinkHeader.hidden = false;
      loginLinkHeader.style.display = '';
    }
  }

  function updateHeaderState(isLoggedIn: boolean): void {
    if (isLoggedIn) {
      if (loginLinkHeader) {
        loginLinkHeader.hidden = true;
        loginLinkHeader.style.display = 'none';
      }
      if (loggedUserAvatarHeader) {
        loggedUserAvatarHeader.hidden = false;
        loggedUserAvatarHeader.style.display = '';
        const userString = window.localStorage.getItem('user');
        if (userString) {
          const user = JSON.parse(userString);
          const profilePicture = JSON.parse(user.profilePicture);
          // Update the avatar with profilePicture data
          console.log(profilePicture);
        }
      }
    } else {
      if (loginLinkHeader) {
        loginLinkHeader.hidden = false;
        loginLinkHeader.style.display = '';
      }
      if (loggedUserAvatarHeader) {
        loggedUserAvatarHeader.hidden = true;
        loggedUserAvatarHeader.style.display = 'none';
      }
    }
  }

  window.addEventListener('userVerificationComplete', ((
    event: UserVerificationEvent,
  ) => {
    updateHeaderState(event.detail.isLoggedIn);
  }) as EventListener);
</script>
