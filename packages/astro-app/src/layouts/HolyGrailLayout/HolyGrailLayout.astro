---
import { BaseHtml, type BaseHtmlProps } from '@layouts/BaseHtml';
import { Footer } from '@layouts/Footer';
import { Header } from '@layouts/Header';
import { MainContent } from '@layouts/MainContent';
import type { HTMLAttributes } from 'astro/types';

export type HolyGrailLayoutProps = BaseHtmlProps;

interface Props extends HTMLAttributes<'html'>, HolyGrailLayoutProps {}

const { ...props }: Props = Astro.props;
---

<BaseHtml {...props}>
  <Header />
  <MainContent class='px-4 py-8 md:px-8'>
    <slot />
    <!-- your content is injected here -->
  </MainContent>
  <Footer />
</BaseHtml>

<script>
  // Swipe detection variables
  let touchstartX = 0;
  let touchendX = 0;
  const minSwipeDistance = 50; // Minimum distance to be considered a swipe

  // Get the checkbox element
  const checkbox = document.getElementById(
    'site_side_navigation_menu_id',
  ) as HTMLInputElement;

  // Function to handle touch start
  function handleTouchStart(event: TouchEvent) {
    touchstartX = event.changedTouches[0].screenX;
  }

  // Function to determine swipe direction and update checkbox
  function handleSwipe() {
    const swipeDistance = touchendX - touchstartX;

    if (Math.abs(swipeDistance) < minSwipeDistance) {
      return; // Not a significant swipe
    }

    if (swipeDistance > 0) {
      // Right swipe
      checkbox.checked = true;
    } else {
      // Left swipe
      checkbox.checked = false;
    }
  }

  // Function to handle touch end
  function handleTouchEnd(event: TouchEvent) {
    touchendX = event.changedTouches[0].screenX;
    handleSwipe();
  }

  // Add event listeners
  document.addEventListener('touchstart', handleTouchStart, false);
  document.addEventListener('touchend', handleTouchEnd, false);

  document.addEventListener('DOMContentLoaded', async () => {
    const userInLocalStorage = window.localStorage.getItem('user');
    const sessionExpiration: string | null = JSON.parse(
      window.localStorage.getItem('sessionExpiresAt') ?? 'null',
    );

    if (
      !userInLocalStorage ||
      !sessionExpiration ||
      new Date(sessionExpiration).getTime() < Date.now()
    ) {
      const response = await (
        await fetch('/api/v1/auth/verify-user', {
          headers: {
            'Content-Type': 'application/json',
          },
        })
      ).json();

      const { user, sessionExpiresAt } = response;

      if (user) {
        window.localStorage.setItem('user', JSON.stringify(user));
        window.localStorage.setItem(
          'sessionExpiresAt',
          JSON.stringify(sessionExpiresAt),
        );
      } else {
        window.localStorage.removeItem('user');
        window.localStorage.removeItem('sessionExpiresAt');
        console.log(
          `Sign in to have access to lots of user related features!
        Click here to login! ðŸ‘‰ ${import.meta.env.PUBLIC_BASE_SITE_URL}/login ðŸ‘ˆ`,
        );
      }
    }
  });
</script>
