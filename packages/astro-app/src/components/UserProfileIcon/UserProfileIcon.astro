---
import { AuthService, UsersService } from '@ducky-coding/db/services';
import type { HTMLAttributes } from 'astro/types';
import { Image } from 'astro:assets';
import DuckyCodingLogo from '@assets/images/DuckyCoding_logo.png';
import type { ImageMetadata } from 'astro';
import { getTokens } from '@utils/auth/auth';
import type { ImageDTO } from '@ducky-coding/types/DTOs';
import { matchImageFromGlobImport } from '../../utils/images/images';
import { IMAGE_DENSITIES } from '../../utils/globals';

export interface UserProfileIconProps
  extends Omit<HTMLAttributes<'img'>, 'src'> {
  width: number;
  height: number;
}

interface Props extends UserProfileIconProps {}

const { width, height, ...props }: Props = Astro.props;

export const prerender = false;

let userId: number | null = null;

try {
  const { refreshToken } = getTokens(Astro.request.headers);

  userId = await AuthService.verifyRefreshToken(refreshToken || '');
} catch (error) {
  // console.error('error', error);
}

let processedImage: ImageMetadata | undefined;

let userProfilePicture: ImageDTO | undefined;

if (userId) {
  userProfilePicture = await UsersService.getUserProfilePicture(userId);

  console.log('fetched image');
  if (userProfilePicture?.path) {
    const imageToFindPath = userProfilePicture.path;
    if (imageToFindPath) {
      const images = import.meta.glob<{ default: ImageMetadata }>(
        `/src/assets/images/**/*.{jpeg,jpg,png,gif,webp,svg}`,
      );
      processedImage = await matchImageFromGlobImport(images, imageToFindPath);
    }
  }
}
---

<Image
  src={processedImage ?? DuckyCodingLogo}
  {...props}
  alt={userProfilePicture?.alt || props.alt || 'User profile picture'}
  width={width || 50}
  height={height || 50}
  densities={IMAGE_DENSITIES}
  loading={'eager'}
  decoding={'async'}
/>
