---
import type { HTMLAttributes } from 'astro/types';
import { cva, type VariantProps } from 'cva';
import { cn } from '@utils/cn';

const buttonVariants = cva({
  base: '',
  variants: {
    variant: {
      default:
        'inline-block text-accent font-semibold rounded-md border-comic hover:border-accent-700 border-transparent transition-all hover:text-accent-700 active:text-accent-700 active:border-accent-700',
      contained:
        'inline-block text-secondary font-semibold bg-accent rounded-md border-comic border-secondary shadow-comic shadow-secondary -translate-x-0.5 -translate-y-0.5 transition-all hover:bg-accent-700 active:bg-accent-700 active:translate-x-0 active:translate-y-0 active:scale-95 active:shadow-comic-pressed',
      outlined:
        'inline-flex items-center relative text-accent font-semibold bg-transparent rounded-md border-comic border-accent transition-all overflow-hidden hover:text-secondary active:text-secondary hover:border-secondary active:border-secondary before:content-[""] before:absolute before:h-full before:w-full before:-z-10 before:bg-accent-700 before:transition-transform before:duration-[0.15s] before:ease-in-out before:-translate-x-full hover:before:-translate-x-4 active:before:-translate-x-4',
      unstyled: '',
    },
    size: {
      small: 'text-sm',
      medium: 'text-base',
      large: 'text-3xl',
    },
  },
  defaultVariants: {
    variant: 'default',
    size: 'medium',
  },
  compoundVariants: [
    {
      variant: ['default', 'contained', 'outlined'],
      size: 'small',
      class: 'py-1 px-2',
    },
    {
      variant: ['default', 'contained', 'outlined'],
      size: 'medium',
      class: 'py-2 px-4',
    },
    {
      variant: ['outlined'],
      size: 'medium',
      class: 'before:-translate-x-[calc(100%+0.5rem)]',
    },
    {
      variant: ['outlined'],
      size: 'medium',
      class: 'before:-translate-x-[calc(100%+1rem)]',
    },
  ],
});

export type ButtonProps = VariantProps<typeof buttonVariants>;

interface Props extends HTMLAttributes<'button'>, ButtonProps {}

/**
 * For Astro components, we recommend setting your defaultVariants within
 * Astro.props (which are `undefined` by default)
 */
const { class: className, variant, size, ...props }: Props = Astro.props;
---

<button class={cn(buttonVariants({ variant, size }), className)} {...props}>
  <slot />
</button>
