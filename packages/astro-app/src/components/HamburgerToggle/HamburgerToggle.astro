---
import type { HTMLAttributes } from 'astro/types';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from 'src/utils/cn';

const hamburgerToggleVariants = cva(
  'flex flex-col cursor-pointer z-[1000] aspect-square justify-center',
  {
    variants: {
      variant: {
        // small: '',
        medium: 'w-10 gap-2',
        // large: '',
      },
    },
    defaultVariants: {
      variant: 'medium',
    },
    compoundVariants: [],
  },
);

const spanVariants = cva('bg-secondary items-center transition-all', {
  variants: {
    variant: {
      // small: '',
      medium: 'h-1',
      // large: '',
    },
  },
  defaultVariants: {
    variant: 'medium',
  },
  compoundVariants: [],
});

export type HamburgerToggleProps = VariantProps<typeof hamburgerToggleVariants>;

interface Props extends HTMLAttributes<'input'>, HamburgerToggleProps {}

const { variant, class: className } = Astro.props;
---

<input
  id='hamburgerCheckbox'
  type='checkbox'
  class={cn('absolute h-0 w-0 opacity-0 cursor-pointer', className)}
  title={Astro.props.title ?? 'hamburger toggle'}
/>
<label
  for='hamburgerCheckbox'
  class={cn(hamburgerToggleVariants({ variant }), className)}
  aria-labelledby='hamburgerCheckbox'
>
  <span class={cn(spanVariants({ variant }))}></span>
  <span class={cn(spanVariants({ variant }))}></span>
  <span class={cn(spanVariants({ variant }))}></span>
</label>

<style>
  input:checked ~ label span:nth-child(2) {
    opacity: 0;
  }
  input:checked ~ label span:nth-child(1) {
    transform-origin: left;
    transform: rotate(37.5deg);
  }
  input:checked ~ label span:nth-child(3) {
    transform-origin: left;
    transform: rotate(-37deg);
  }
</style>
