---
import { HolyGrailLayout } from '@layouts/HolyGrailLayout';
import { TopicsService } from '@ducky-coding/db/services';
import { PostCard } from '@components/PostCard';
import { getCollection } from 'astro:content';
import { type ImageMetadata } from 'astro';
import { matchImageFromGlobImport } from '../../../utils/images/images';

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const topicsWithImages = await TopicsService.getAll();
  // Process topics and match with images

  const dynamicRouteData = await Promise.all(
    topicsWithImages.map(async (topic) => {
      let processedImage: ImageMetadata | undefined;
      const imageToFindPath = topic.images?.path;
      if (imageToFindPath) {
        const images = import.meta.glob<{ default: ImageMetadata }>(
          `/src/assets/images/topics/**/*.{jpeg,jpg,png,gif,webp,svg}`,
        );
        processedImage = await matchImageFromGlobImport(
          images,
          imageToFindPath,
        );
      }

      const processedTopic = {
        ...topic,
        imageSrc: processedImage ?? null,
      };
      return {
        params: { topic: topic.topics.slug },
        props: { processedTopic },
      };
    }),
  );

  return dynamicRouteData;
}
// 2. For your template, you can get the entry directly from the prop
const { processedTopic } = Astro.props;
const postsEntries = await getCollection('posts');

const filteredRelatedPosts = postsEntries.filter((entry) => {
  return (
    entry.data.topic.title === processedTopic.topics.title &&
    entry.data.status === 'published'
  );
});

const processedPosts = await Promise.all(
  filteredRelatedPosts.map(async (post) => {
    let processedImage: ImageMetadata | undefined;
    const imageToFindPath = `posts/${post.data.bannerImage.filename}`;
    if (imageToFindPath) {
      const images = import.meta.glob<{ default: ImageMetadata }>(
        `/src/assets/images/posts/**/*.{jpeg,jpg,png,gif,webp,svg}`,
      );
      processedImage = await matchImageFromGlobImport(images, imageToFindPath);
    }

    const processedPost = {
      ...post,
      processedBannerImage: processedImage ?? null,
    };
    return processedPost;
  }),
);
---

<HolyGrailLayout
  title={processedTopic.topics.title}
  seoProps={{
    title: `Topic: ${processedTopic.topics.title}`,
    description: `Discover the latest posts related to ${processedTopic.topics.title}, written by DuckyCoding!`,
    extend: {
      meta: [
        {
          name: 'keywords',
          content: `${processedTopic.topics.title}, posts about ${processedTopic.topics.title}, posts`,
        },
      ],
    },
  }}
>
  <h1 class='mb-8 text-center text-4xl font-extrabold md:text-left'>
    {processedTopic.topics.title}
  </h1>
  {
    processedPosts.length > 0 ? (
      <ul class='grid-container grid gap-8'>
        {processedPosts.map((post) => {
          return (
            <li class='mb-8 last-of-type:mb-0'>
              <PostCard
                post={post}
                bannerImage={
                  post?.processedBannerImage || processedTopic.imageSrc || null
                }
              />
            </li>
          );
        })}
      </ul>
    ) : (
      <>
        <h2 class='text-balance text-center text-2xl font-extrabold md:text-left'>
          {`There isn't any content about ${processedTopic.topics.title} yet :'(`}
        </h2>
        <h3 class='text-center text-xl font-extrabold md:text-left'>
          Check again soon!
        </h3>
      </>
    )
  }
</HolyGrailLayout>

<style>
  @media (width >= 768px) {
    .grid-container {
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    }
  }
</style>
