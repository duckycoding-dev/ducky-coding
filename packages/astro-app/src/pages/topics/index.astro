---
import { TopicCard } from '@components/TopicCard';
import { HolyGrailLayout } from '@layouts/HolyGrailLayout';
import { TopicsService } from '@services/db/topics/TopicsService';
import type { ImageMetadata } from 'astro';

const topics = await TopicsService.getAll();
// Process topics and match with images
const imagesInSrcTopicsDirectory = await Astro.glob<{ default: ImageMetadata }>(
  '/src/assets/images/topics/**/*.{jpeg,jpg,png,gif,svg}',
);

const processedTopics = topics.map((topic) => {
  let processedImage: ImageMetadata | undefined;
  const imageToFind = topic.imageFilename;
  if (imageToFind) {
    processedImage = imagesInSrcTopicsDirectory.find((img) =>
      img.default.src.includes(imageToFind),
    )?.default;
  }
  const processedTopic = {
    ...topic,
    imageSrc: processedImage ?? null,
  };
  return processedTopic;
});
---

{
  /* not sure why I can't just pass a ImageMetaData type to TopicsCard even if I add it as a possible type for src */
}

<HolyGrailLayout
  title='Topics'
  seoProps={{
    description:
      "Here's a list of all the topics I've written about in my posts: find what you need in a nicely organized way.",
    extend: {
      meta: [
        {
          name: 'keywords',
          content: 'DuckyCoding, web development, topics, posts',
        },
      ],
    },
  }}
>
  <h1 class='mb-8 text-center text-4xl font-extrabold'>Topics</h1>
  <section class='grid-container grid grid-cols-1 gap-5'>
    {
      processedTopics.map((topic) =>
        topic.imageSrc ? (
          <TopicCard
            imageSrc={topic.imageSrc}
            imageAlt={topic.imageAlt ?? `${topic.title} representation`}
            title={topic.title}
            slug={topic.slug}
          />
        ) : (
          <p>Image not found for {topic.title}</p>
        ),
      )
    }
  </section>
</HolyGrailLayout>

<style>
  .grid-container {
    grid-template-columns: repeat(2, 1fr);
  }

  @media (width >= 768px) {
    .grid-container {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
  }
</style>
