---
import { TopicCard } from '@components/TopicCard';
import { HolyGrailLayout } from '@layouts/HolyGrailLayout';
import { TopicsService } from '@ducky-coding/db/services';
import type { ImageMetadata } from 'astro';
import { matchImageFromGlobImport } from '@utils/images/images';
import DuckyCodingLogo from '@assets/images/DuckyCoding_logo.png';
import { serverLogger } from '@utils/logs/logger';

const topicsWithImages = await TopicsService.getAllTopicsWithImage();
// Process topics and match with images
const processedTopics = await Promise.all(
  topicsWithImages.map(async (topic) => {
    let processedImage: ImageMetadata | undefined;
    const imageToFindPath = topic.image?.path;
    if (imageToFindPath) {
      const images = import.meta.glob<{ default: ImageMetadata }>(
        `/src/assets/images/topics/**/*.{jpeg,jpg,png,gif,webp,svg}`,
      );
      processedImage = await matchImageFromGlobImport(
        images,
        imageToFindPath,
        serverLogger,
      );
    }

    const processedTopic = {
      ...topic,
      imageSrc: processedImage ?? null,
    };
    return processedTopic;
  }),
);
---

<HolyGrailLayout
  title='Topics'
  seoProps={{
    title: 'Topics',
    description:
      "Here's a list of all the topics I've written about in my posts: find what you need in a nicely organized way.",
    extend: {
      meta: [
        {
          name: 'keywords',
          content: 'DuckyCoding, web development, topics, posts',
        },
      ],
    },
  }}
>
  <h1 class='mb-8 text-center text-4xl font-extrabold'>Topics</h1>
  <section class='grid-container grid grid-cols-1 gap-5'>
    {
      processedTopics.map((topic) => (
        <TopicCard
          imageSrc={topic.imageSrc || DuckyCodingLogo}
          imageAlt={topic.image?.alt ?? `${topic.title} representation`}
          title={topic.title}
          slug={topic.slug}
        />
      ))
    }
  </section>
</HolyGrailLayout>

<style>
  .grid-container {
    grid-template-columns: 1fr;
  }
  @media (width >= var(--breakpoint-xs)) {
    .grid-container {
      grid-template-columns: repeat(2, minmax(100px, 1fr));
    }
  }
  @media (width >= var(--breakpoint-sm)) {
    .grid-container {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }
  }
</style>
