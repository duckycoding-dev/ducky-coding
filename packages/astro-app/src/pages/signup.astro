---
import { HolyGrailLayout } from '@layouts/HolyGrailLayout';
import { Button } from '@components/Button';
import { GET } from './api/v1/auth/verify-user';
import { Link } from '../components/Link';
import { InputWithLabel } from '../components/Form/InputWithLabel';

export const prerender = false;
const res = await (await GET(Astro)).json();

if (res.user) {
  return Astro.redirect('/');
}
---

<HolyGrailLayout
  title='Sign up'
  seoProps={{
    title: 'Sign up',
    description:
      "Sign up to DuckyCoding's blog: like, save and comment on your favorite content!",
    extend: {
      meta: [
        {
          name: 'keywords',
          content: 'sign up, register, DuckyCoding, web development, auth',
        },
      ],
    },
  }}
>
  <h1 class='mb-8 text-center text-4xl font-extrabold'>Sign up</h1>
  <p class='mb-8 text-center text-lg'>
    Create an account to manage your favorite posts, customize your experience
    and engage with other developers!
  </p>
  <form action='/api/v1/auth/signup' method='post' class='flex flex-col gap-4'>
    <InputWithLabel
      type='email'
      name='email'
      id='email'
      title='Email'
      placeholder='Your email'
      required={true}
    >
      Email
    </InputWithLabel>
    <InputWithLabel
      type='text'
      name='username'
      id='username'
      title='Username'
      placeholder='Your username'
      required={true}
    >
      Username
    </InputWithLabel>
    <InputWithLabel
      type='text'
      name='name'
      id='name'
      title='name'
      placeholder='Your name'
      required={true}
      minlength={2}
    >
      Name
    </InputWithLabel>
    <InputWithLabel
      type='text'
      name='lastName'
      id='lastName'
      title='Last name'
      placeholder='Your last name'
      required={false}
    >
      Last name
    </InputWithLabel>
    <InputWithLabel
      type='password'
      name='password'
      id='password'
      title='Password'
      placeholder='Your password'
      required={true}
      minlength={8}
    >
      Password
    </InputWithLabel>
    <InputWithLabel
      type='password'
      name='repeatPassword'
      id='repeatPassword'
      title='Repeat password'
      placeholder='Your password (again)'
      required={true}
      minlength={8}
    >
      Repeat password
    </InputWithLabel>

    <Button class={'w-full mt-4'} type='submit' variant={'contained'}
      >Sign up</Button
    >
  </form>
  <p class='mt-4 text-sm text-red-500'>* Required fields</p>

  <p class='mt-2 text-center'>
    By signing up, you agree to our
    <Link href='/terms' class={'font-extrabold'}> Terms of Service </Link>
    and
    <Link href='/privacy' class={'font-extrabold'}> Privacy Policy </Link>
  </p>
  <p class='mt-4 text-center'>
    Already have an account?
    <Link href='/login' class={'font-extrabold'}> Login instead! </Link>
  </p>
</HolyGrailLayout>

<style>
  form input:invalid:focus,
  form input:invalid:active {
    outline: 2px solid var(--color-danger);
  }
  form input:valid:focus,
  form input:valid:active {
    outline: 2px solid var(--color-success);
  }
</style>

<script>
  import { CreateUserDTOSchema } from '@ducky-coding/types/DTOs';
  import type { inferFormattedError } from 'zod';

  function updateOrCreateErrorLabel(
    label: HTMLLabelElement,
    labelId: string,
    errorMessage: string,
  ) {
    let errorLabel = document.getElementById(`${labelId}-error`);
    if (!errorLabel) {
      errorLabel = document.createElement('span');
      errorLabel.id = `${labelId}-error`;
      errorLabel.className = 'text-red-500';
      label.appendChild(errorLabel);
    }
    errorLabel.textContent = errorMessage;
    label.parentElement
      ?.querySelector('input')
      ?.setAttribute('aria-invalid', 'true');
    label.parentElement
      ?.querySelector('input')
      ?.setAttribute('aria-describedby', `${labelId}-error`);
  }

  function removeErrorLabel(labelId: string) {
    const errorLabel = document.getElementById(`${labelId}-error`);
    if (errorLabel) errorLabel.remove();
    const input = document.getElementById(labelId.split('-')[0]);
    input?.removeAttribute('aria-invalid');
    input?.removeAttribute('aria-describedby');
  }

  function displayErrors(
    formattedErrors: inferFormattedError<typeof CreateUserDTOSchema>,
    formTarget: HTMLFormElement,
  ) {
    const formLabels = formTarget?.querySelectorAll('label');
    formLabels?.forEach((label) => {
      const labelId = label.getAttribute('id');
      if (labelId === null) return;
      const fieldName = labelId.split('-')[0];
      const errorMessageObject = formattedErrors[
        fieldName as keyof typeof formattedErrors
      ] as { _errors: string[] } | undefined;

      if (errorMessageObject) {
        // eslint-disable-next-line no-underscore-dangle
        const errorMessage = errorMessageObject._errors.at(-1) ?? '';
        updateOrCreateErrorLabel(label, labelId, errorMessage);
      } else {
        removeErrorLabel(labelId);
      }
    });
  }

  // Add input event listeners to clear errors when user starts typing
  document.querySelectorAll('input').forEach((input) => {
    input.addEventListener('input', () => {
      const labelId = `${input.id}-label`;
      removeErrorLabel(labelId);
    });
  });

  function handleSubmit(event: Event) {
    event.preventDefault();
    const formTarget = event.target as HTMLFormElement;
    const formData = new FormData(formTarget);
    const payload = Object.fromEntries(formData.entries());
    const { error } = CreateUserDTOSchema.safeParse(payload);

    if (error) {
      displayErrors(error.format(), formTarget);
      return;
    }

    // Submit the form
    console.log('submitting form');
    formTarget.submit();
  }

  const form = document.querySelector('form');
  form?.addEventListener('submit', handleSubmit);

  async function checkAvailability(input: HTMLInputElement) {
    const field = input.getAttribute('name');
    const { value } = input;
    if (!value) return;
    const res = await fetch(
      `/api/v1/users/check-availability?${field}=${value}`,
    );
    const data = await res.json();

    if (res.status === 403) {
      updateOrCreateErrorLabel(
        input.labels?.[0] as HTMLLabelElement,
        `${field}-label`,
        data.message,
      );
      input.setCustomValidity(data.message);
    } else {
      input.setCustomValidity(''); // Clear the custom validity
    }
  }

  const emailInput: HTMLInputElement | null =
    document.querySelector('input#email');
  emailInput?.addEventListener('blur', function () {
    checkAvailability(this);
  });

  const usernameInput: HTMLInputElement | null =
    document.querySelector('input#username');
  usernameInput?.addEventListener('blur', function () {
    checkAvailability(this);
  });
</script>
